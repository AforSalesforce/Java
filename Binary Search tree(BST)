

class Node{
    Node left;
    Node right;
    int data;
    
    public static Node newNode(int data){
        Node n = new Node();
        n.left = null;
        n.right = null;
        n.data = data;
        return n;
    }
}

public class BinaryTree {
    public Node addNode(int data, Node head){
        Node tempHead = head;
        Node n = Node.newNode(data);
        if(head == null){
            head = n;
            return head;
        }
        Node prev = null;
        while(head != null){
            prev = head;
            if(head.data < data){
                head = head.right;
            }else{
                head = head.left;
            }
        }
        if(prev.data < data){
            prev.right = n;
        }else{
            prev.left = n;
        }
        return tempHead;
    }
    
    public int height(Node root){
        if(root == null){
            return 0;
        }
        int leftHeight  = height(root.left);
        int rightHeight = height(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
    
    public static void main(String args[]){
        BinaryTree bt = new BinaryTree();
        Node head = null;
        head = bt.addNode(10, head);
        head = bt.addNode(15, head);
        head = bt.addNode(5, head);
        head = bt.addNode(7, head);
        head = bt.addNode(19, head);
        head = bt.addNode(20, head);
        head = bt.addNode(-1, head);
        head = bt.addNode(21, head);
        System.out.println(bt.height(head));
        InorderTraversal(head);
        NumberOfFullNodes nd=new NumberOfFullNodes();
        int x=nd.FullNodes(head);
        
        System.out.println("Number of full nodes: "+x);
        
        NumberOfLeafNodes lf=new NumberOfLeafNodes();
        
        int n=lf.NumOfLeafNodes(head);
        
        System.out.println("number of leafnodes: "+n);
        
        hasPathSum hps=new hasPathSum();
        boolean ans=hps.RootToleafPathSum(head, 20);
        System.out.println("root to leaf path sum exists "+ans);
        
        PrintAllAncestro paa=new PrintAllAncestro();
        paa.PrintAncestors(head, 21);
        
        TreeToLinkedList tr=new TreeToLinkedList();
        
        System.out.println("Doubly linkedlist:");
        Node start=tr.ConvetToList(head);
        Node temp=start;
        while(temp!=null)
        {
        	System.out.print(temp.data+"<->");
        	temp=temp.right;
        }
        	
        
    }

	private static void InorderTraversal(Node head) {
		
		if(head==null)
		{
			return;
		}
		InorderTraversal(head.left);
		System.out.println(head.data+" ");
		InorderTraversal(head.right);
	}
}
