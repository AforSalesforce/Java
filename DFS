import java.util.Scanner;
import java.util.Stack;

public class DFS {
	
	private static Stack<Integer> stack;
	public DFS()
	{
		stack=new Stack<Integer>();
	}
	public static void dfs(int adj[][],int source)
	{
		int len=adj[source].length-1;
		System.out.print(len+"=lenght");
		int visited[]=new int[len+2];
		int element=source;
		int i=source;
		System.out.print(element+"\t");
		visited[i]=1;
		stack.push(source);
		while(!stack.isEmpty())
		{
			element=stack.peek();
			i=element;
			while(i<=len)
			{
				if(adj[element][i]==1&&visited[i]==0)
				{
					stack.push(i);
					element=i;
					visited[i]=1;
					i=1;
					System.out.print(element+"\t");
					continue;
				}
				i++;
			}
			stack.pop();
		}
		
	}

	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	System.out.println("Enter the n8umber of nodes the graph has");
	int n=in.nextInt();
	int adjacency[][]=new int[n][n];
	System.out.println("Enter the adjacency matrix of the graph");
	for(int i=0;i<n;i++) 
	{
		
		for(int j=0;j<n;j++)
		{
			adjacency[i][j]=in.nextInt();
		}
	}
	System.out.println("Enter the source node");
	int s=in.nextInt();
	DFS df=new DFS();
	df.dfs(adjacency,s);
	
	}

}
