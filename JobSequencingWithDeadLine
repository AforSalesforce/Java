import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
/*class ArraySort implements Comparator<Integer[]>
{

	@Override
	public int compare(Integer[] o1, Integer[] o2) {
		return Integer.compare(o1, o2);
	}
	
}*/

public class JobSequencingWithDeadLine {

	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		System.out.println("Enter the number of jobs");
		int n=in.nextInt();
		System.out.println("Enter the job and deadline");
		int a[][]=new int[n][n];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<2;j++)
			{
				a[i][j]=in.nextInt();
			}
		}
		java.util.Arrays.sort(a, new java.util.Comparator<int[]>() {
		    public int compare(int[] a, int[] b) {
		        return -Integer.compare(a[0], b[0]);
		    }
		});
		FindMaxiMumProfitJobSequence(a,n);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<2;j++)
			{
				System.out.print(a[i][j]+" ");
			}
			System.out.println();
		}
	}

	private static void FindMaxiMumProfitJobSequence(int[][] a, int n) {
		boolean slot[]=new boolean[n];
		int result[]=new int[n];
		for(int i=0;i<n;i++)
		{
			slot[i]=false;
		}
		for(int i=0;i<n;i++)
		{
			for(int j=Math.min(n, a[i][1])-1;j>=0;j--)
			{
				if(slot[j]==false)
				{
					result[j]=i;
					slot[j]=true;
					break;
				}
			}
		}
		for(int i=0;i<n;i++)
		{
			if(slot[i])
			System.out.print(result[i]+" ");
		}
	}

}
