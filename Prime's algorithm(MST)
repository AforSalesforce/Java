import java.util.Scanner;

class FindMST
{
	public static int V;
	public FindMST(int V)
	{
		this.V=V;
	}
	public int FindMin(int key[],boolean mstset[])
	{
		int min=Integer.MAX_VALUE,min_indx=-1;
		for(int v=0;v<V;v++)
		{
			if(mstset[v]==false&&key[v]<min)
			{
				min=key[v];
				min_indx=v;
			}
		}
		return min_indx;
	}
	public void PrintMST(int parent[],int n,int Ghraph[][])
	{
		System.out.println("Edge  Weight");
		for(int i=1;i<V;i++)
		{
			System.out.println(parent[i]+" "+i+" "+Ghraph[i][parent[i]]);
		}
	}
	public void MST(int Graph[][])
	{
		int parent[]=new int[V];
		int key[]=new int[V];
		boolean mstset[]=new boolean[V];
		
		for(int i=0;i<V;i++)
		{
			key[i]=Integer.MAX_VALUE;
			mstset[i]=false;
		}
		
		key[0]=0;
		
		parent[0]=-1;
		for(int count=0;count<V;count++)
		{
			int u=FindMin(key,mstset);
			
			mstset[u]=true;
			for(int v=0;v<V;v++)
			{
				
				if(Graph[u][v]!=0 && mstset[v]==false&&Graph[u][v]<key[v])
				{
					parent[v]=u;
					key[v]=Graph[u][v];
				}
			}
			
			
			
		}
		PrintMST(parent,V,Graph);
	
	}
}

public class PrimesAlgorithm {

	public static void main(String[] args) {
		System.out.println("Enter the values into adjacency matrix");
		int adj[][]=new int[][]{{0, 2, 0, 6, 0},
            {2, 0, 3, 8, 5},
            {0, 3, 0, 0, 7},
            {6, 8, 0, 0, 9},
            {0, 5, 7, 9, 0},
           };
		/*for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				adj[i][j]=in.nextInt();
			}
		}*/
		FindMST obj=new FindMST(5);
		obj.MST(adj);

	}

}
